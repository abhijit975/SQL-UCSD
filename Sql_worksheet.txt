Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537 (Foreign Key = user_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer: 
		Select Count(id),
		Count(name),
		count(review_count),
		count(yelping_since),
		count(useful),
		count(funny),
		count(cool),
		count(fans),
		count(average_stars),
		count(compliment_hot),
		count(compliment_more),
		count(compliment_profile),
		count(compliment_list),
		count(compliment_note),
		count(compliment_cool),
		count(compliment_plain),
		count(compliment_cool),
		count(compliment_funny),
		count(compliment_writer),
		count(compliment_photos)
		From user

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	Select City,
	Sum(Review_count) as tot_rev
	From business
	Group by City
	Order by tot_rev desc
	
	
	Copy and Paste the Result Below: 
	
	| Las Vegas       |   82854 |
	| Phoenix         |   34503 |
	| Toronto         |   24113 |
	| Scottsdale      |   20614 |
	| Charlotte       |   12523 |
	| Henderson       |   10871 |

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer: 

Select Stars,
Count(stars) as count
From business
Where city = 'Avon'
Group by stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

Select Stars,
Count(stars) as count
From business
Where city = 'Beachwood'
Group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	Select Name,
	review_count
	From user
	Order by review_count desc
	Limit 3;
	
	Copy and Paste the Result Below:		

	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	While the total number of reviews do not have a clear correlation with number of
	fans, there is definitely a 'threshold value' for review count before you start to
	gain a significant number of fans.
	
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More reviews with "love".

	SQL code used to arrive at answer:

	Select Count(id)
	From review
	Where text like '%love%'
	Union
	Select Count(id)
	From review
	Where text like '%hate%'
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	Select name,
	fans
	From user
	order by fans desc
	Limit 10

	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

There is not enough difference in the distribution of hours.
Both the highest star restaurant and the lowest star restaurant have similar hours.

Select b.stars,
h.hours
From category c INNER JOIN business b 
on c.business_id = b.id
INNER JOIN hours h
on c.business_id = h.business_id
Where city = 'Toronto' AND category = 'Restaurants'
order by b.stars desc

ii. Do the two groups you chose to analyze have a different number of reviews?
         
Yes. Restaurants with 4-5 star rating have more number of reviews that 2-3 star restaurants.

Select b.stars,
sum(b.review_count)
From category c INNER JOIN business b 
on c.business_id = b.id
Where city = 'Toronto' AND category = 'Restaurants'
group by b.stars
order by b.stars     
     
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

The highest rated places are in nearby areas (very similar latitude and longitude), but there is not enough correlation to draw a conclusion in general.

SQL code used for analysis: 

Select b.stars,
b.name,
b.neighborhood,
b.postal_code,
b.latitude,
b.longitude
From category c INNER JOIN business b 
on c.business_id = b.id
Where city = 'Toronto' AND category = 'Restaurants'
order by longitude desc		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: There are more closed businesses with lowest rating (1.5-2.0) than highest ratings (4.5-5.0).
  
         
ii. Difference 2: Businesses which are more focused on one the nightlife/occasions (e.g. nightlife, event planning) have a higher closing rate than daylong businesses.
         
         
         
SQL code used for analysis:

-- For part i

Select 
b.stars,
(sum(b.is_open)*100)/count(b.name) as fraction
From category c INNER JOIN business b 
on c.business_id = b.id
group by b.stars
Having count(b.name)>5
order by stars desc


-- For part ii

Select 
sum(b.is_open) as open, -- total open restaurants of a certain category
count(b.name) as total, -- total # of restaurants of a certain category
(sum(b.is_open)*100)/count(b.name) as fraction, -- Calculation of the % restaurants open
c.category
From category c INNER JOIN business b 
on c.business_id = b.id
group by c.category
Having total>5
order by fraction desc	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
Creating the training dataset to predict the number of fans of a user.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
The number of fans of a user will depend on a number of factors. It will depend mostly on the type of reviews that the user writes. For example,
how detailed the reviews are,how many people find the review useful, how frequently does a user provide reviews, how many tips the user provides etc.
                  
iii. Output of your finished dataset:
         
10 of 10000 showing.

+---------------+--------------+-------------+--------+---------------+---------+--------+--------+---------+-----------+-------------+---------------+------+------+
| new_id        | review_count | account_age | useful |     frequency | tot_tip |   cool |  funny | len_rev | count_rev | avg_rev_len | no_of_friends | year | fans |
+---------------+--------------+-------------+--------+---------------+---------+--------+--------+---------+-----------+-------------+---------------+------+------+
| Amy_24Q       |          609 |      5589.0 |   3226 | 3.26892109501 |       0 |   2751 |   2554 |    None |         0 |        None |             0 | None |  503 |
| Mimi_eRQ      |          968 |      4239.0 |    257 | 6.85067232838 |       0 |    159 |    138 |    None |         0 |        None |             0 | None |  497 |
| Harald_igw    |         1153 |      3631.0 | 122921 | 9.52630129441 |       0 | 122890 | 122419 |    None |         0 |        None |             0 | None |  311 |
| Gerald_sCw    |         2000 |      3612.0 |  17524 | 16.6112956811 |       0 |  15008 |   2324 |    None |         0 |        None |             0 | None |  253 |
| Christine_okQ |          930 |      4869.0 |   4834 | 5.73012939002 |       0 |   4321 |   6646 |    None |         0 |        None |             0 | None |  173 |
| Lisa_2Sw      |          813 |      4780.0 |     48 | 5.10251046025 |       0 |      6 |     13 |    None |         0 |        None |             0 | None |  159 |
| Cat_tcw       |          377 |      5022.0 |   1062 | 2.25209080048 |       0 |   1076 |    672 |    None |         0 |        None |             0 | None |  133 |
| William_ZwQ   |         1215 |      2817.0 |   9363 | 12.9392971246 |       0 |   9370 |   9361 |    None |         0 |        None |             0 | None |  126 |
| Fran_GkA      |          862 |      3867.0 |   9851 |  6.6873545384 |       0 |   9344 |   7606 |    None |         0 |        None |             0 | None |  124 |
| Lissa_fUw     |          834 |      5563.0 |    455 | 4.49757325184 |       0 |    342 |    150 |    None |         0 |        None |             0 | 2013 |  120 |
+---------------+--------------+-------------+--------+---------------+---------+--------+--------+---------+-----------+-------------+---------------+------+------+
         
iv. Provide the SQL code you used to create your final dataset:

Select u.name || '_' || substr(u.id,-3,3) as new_id -- defining a new id
,u.review_count
,Round(Julianday('now') - Julianday(u.yelping_since)) as account_age -- account age of users in days
, u.useful
, u.review_count/Round(Julianday('now') - Julianday(u.yelping_since))*30 as frequency -- avg # of reviews per month
, count(t.likes) as tot_tip  -- total numbers of tips given by a user
, u.cool
, u.funny
, sum(length(r.text)) as len_rev -- total number of characters in reviews given by a user
, count(r.text) as count_rev -- total number of reviews given by a user
, sum(length(r.text))/count(r.text) as avg_rev_len -- average length of a review given by a user
, count(f.friend_id) as no_of_friends -- no of friends of a user
, e.year
, u.fans 
From user as u Left JOIN tip as t
on u.id = t.user_id
Left JOIN review as r
on u.id = r.user_id
Left JOIN friend as f
on u.id = f.user_id
Left JOIN elite_years as e
on u.id = e.user_id
group by u.id
order by u.fans desc
